<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.sample.domain.member.mapper.BankCardMapper">
  <resultMap id="BaseResultMap" type="cn.sample.domain.member.entity.BankCard">
    <id column="bcid" jdbcType="INTEGER" property="bcid" />
    <result column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="cardholder" jdbcType="VARCHAR" property="cardholder" />
    <result column="bankcardno" jdbcType="VARCHAR" property="bankcardno" />
    <result column="collectingbank" jdbcType="VARCHAR" property="collectingbank" />
    <result column="reservedmobileno" jdbcType="VARCHAR" property="reservedmobileno" />
    <result column="defaultcollectingbank" jdbcType="TINYINT" property="defaultcollectingbank" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="defaultrefundbank" jdbcType="TINYINT" property="defaultrefundbank" />
    <result column="defaultbank" jdbcType="TINYINT" property="defaultbank" />
    <result column="createdon" jdbcType="TIMESTAMP" property="createdon" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    bcid, member_id, cardholder, bankcardno, collectingbank, reservedmobileno, defaultcollectingbank, 
    remark, defaultrefundbank, defaultbank, createdon
  </sql>
  <select id="selectByExample" parameterType="cn.sample.domain.member.entity.BankCardExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bank_card
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bank_card
    where bcid = #{bcid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bank_card
    where bcid = #{bcid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.sample.domain.member.entity.BankCardExample">
    delete from bank_card
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.sample.domain.member.entity.BankCard">
    <selectKey keyProperty="bcid" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bank_card (member_id, cardholder, bankcardno, 
      collectingbank, reservedmobileno, defaultcollectingbank, 
      remark, defaultrefundbank, defaultbank, 
      createdon)
    values (#{memberId,jdbcType=INTEGER}, #{cardholder,jdbcType=VARCHAR}, #{bankcardno,jdbcType=VARCHAR}, 
      #{collectingbank,jdbcType=VARCHAR}, #{reservedmobileno,jdbcType=VARCHAR}, #{defaultcollectingbank,jdbcType=TINYINT}, 
      #{remark,jdbcType=VARCHAR}, #{defaultrefundbank,jdbcType=TINYINT}, #{defaultbank,jdbcType=TINYINT}, 
      #{createdon,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.sample.domain.member.entity.BankCard">
    <selectKey keyProperty="bcid" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bank_card
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        member_id,
      </if>
      <if test="cardholder != null">
        cardholder,
      </if>
      <if test="bankcardno != null">
        bankcardno,
      </if>
      <if test="collectingbank != null">
        collectingbank,
      </if>
      <if test="reservedmobileno != null">
        reservedmobileno,
      </if>
      <if test="defaultcollectingbank != null">
        defaultcollectingbank,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="defaultrefundbank != null">
        defaultrefundbank,
      </if>
      <if test="defaultbank != null">
        defaultbank,
      </if>
      <if test="createdon != null">
        createdon,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="cardholder != null">
        #{cardholder,jdbcType=VARCHAR},
      </if>
      <if test="bankcardno != null">
        #{bankcardno,jdbcType=VARCHAR},
      </if>
      <if test="collectingbank != null">
        #{collectingbank,jdbcType=VARCHAR},
      </if>
      <if test="reservedmobileno != null">
        #{reservedmobileno,jdbcType=VARCHAR},
      </if>
      <if test="defaultcollectingbank != null">
        #{defaultcollectingbank,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="defaultrefundbank != null">
        #{defaultrefundbank,jdbcType=TINYINT},
      </if>
      <if test="defaultbank != null">
        #{defaultbank,jdbcType=TINYINT},
      </if>
      <if test="createdon != null">
        #{createdon,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.sample.domain.member.entity.BankCardExample" resultType="java.lang.Long">
    select count(*) from bank_card
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bank_card
    <set>
      <if test="record.bcid != null">
        bcid = #{record.bcid,jdbcType=INTEGER},
      </if>
      <if test="record.memberId != null">
        member_id = #{record.memberId,jdbcType=INTEGER},
      </if>
      <if test="record.cardholder != null">
        cardholder = #{record.cardholder,jdbcType=VARCHAR},
      </if>
      <if test="record.bankcardno != null">
        bankcardno = #{record.bankcardno,jdbcType=VARCHAR},
      </if>
      <if test="record.collectingbank != null">
        collectingbank = #{record.collectingbank,jdbcType=VARCHAR},
      </if>
      <if test="record.reservedmobileno != null">
        reservedmobileno = #{record.reservedmobileno,jdbcType=VARCHAR},
      </if>
      <if test="record.defaultcollectingbank != null">
        defaultcollectingbank = #{record.defaultcollectingbank,jdbcType=TINYINT},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.defaultrefundbank != null">
        defaultrefundbank = #{record.defaultrefundbank,jdbcType=TINYINT},
      </if>
      <if test="record.defaultbank != null">
        defaultbank = #{record.defaultbank,jdbcType=TINYINT},
      </if>
      <if test="record.createdon != null">
        createdon = #{record.createdon,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bank_card
    set bcid = #{record.bcid,jdbcType=INTEGER},
      member_id = #{record.memberId,jdbcType=INTEGER},
      cardholder = #{record.cardholder,jdbcType=VARCHAR},
      bankcardno = #{record.bankcardno,jdbcType=VARCHAR},
      collectingbank = #{record.collectingbank,jdbcType=VARCHAR},
      reservedmobileno = #{record.reservedmobileno,jdbcType=VARCHAR},
      defaultcollectingbank = #{record.defaultcollectingbank,jdbcType=TINYINT},
      remark = #{record.remark,jdbcType=VARCHAR},
      defaultrefundbank = #{record.defaultrefundbank,jdbcType=TINYINT},
      defaultbank = #{record.defaultbank,jdbcType=TINYINT},
      createdon = #{record.createdon,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.sample.domain.member.entity.BankCard">
    update bank_card
    <set>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="cardholder != null">
        cardholder = #{cardholder,jdbcType=VARCHAR},
      </if>
      <if test="bankcardno != null">
        bankcardno = #{bankcardno,jdbcType=VARCHAR},
      </if>
      <if test="collectingbank != null">
        collectingbank = #{collectingbank,jdbcType=VARCHAR},
      </if>
      <if test="reservedmobileno != null">
        reservedmobileno = #{reservedmobileno,jdbcType=VARCHAR},
      </if>
      <if test="defaultcollectingbank != null">
        defaultcollectingbank = #{defaultcollectingbank,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="defaultrefundbank != null">
        defaultrefundbank = #{defaultrefundbank,jdbcType=TINYINT},
      </if>
      <if test="defaultbank != null">
        defaultbank = #{defaultbank,jdbcType=TINYINT},
      </if>
      <if test="createdon != null">
        createdon = #{createdon,jdbcType=TIMESTAMP},
      </if>
    </set>
    where bcid = #{bcid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.sample.domain.member.entity.BankCard">
    update bank_card
    set member_id = #{memberId,jdbcType=INTEGER},
      cardholder = #{cardholder,jdbcType=VARCHAR},
      bankcardno = #{bankcardno,jdbcType=VARCHAR},
      collectingbank = #{collectingbank,jdbcType=VARCHAR},
      reservedmobileno = #{reservedmobileno,jdbcType=VARCHAR},
      defaultcollectingbank = #{defaultcollectingbank,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR},
      defaultrefundbank = #{defaultrefundbank,jdbcType=TINYINT},
      defaultbank = #{defaultbank,jdbcType=TINYINT},
      createdon = #{createdon,jdbcType=TIMESTAMP}
    where bcid = #{bcid,jdbcType=INTEGER}
  </update>
</mapper>